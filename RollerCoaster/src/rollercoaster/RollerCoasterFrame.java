/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rollercoaster;

/**
 *
 * @author Van
 */
public class RollerCoasterFrame extends javax.swing.JFrame {

    /**
     * Creates new form RollerCoasterFrame
     */
    public RollerCoasterFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExit = new javax.swing.JButton();
        btnCalculate = new javax.swing.JButton();
        txtUserHeight = new javax.swing.JTextField();
        txtUserBackTrouble = new javax.swing.JTextField();
        txtUserHeartTrouble = new javax.swing.JTextField();
        txtRideResponse = new javax.swing.JTextField();
        lblHeight = new javax.swing.JLabel();
        lblBackTrouble = new javax.swing.JLabel();
        lblHeartTrouble = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        lblHeight.setText("Height in cm?");

        lblBackTrouble.setText("Back Trouble (Y/N)?");

        lblHeartTrouble.setText("Heart Trouble (Y/N)?");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 0, 250));
        lblTitle.setText("RollerCoaster Ride");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnCalculate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addGap(93, 93, 93))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBackTrouble)
                    .addComponent(lblHeartTrouble)
                    .addComponent(lblHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUserHeartTrouble, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(txtUserHeight)
                    .addComponent(txtUserBackTrouble))
                .addGap(71, 71, 71))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtRideResponse)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTitle)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeight)
                    .addComponent(txtUserHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBackTrouble)
                    .addComponent(txtUserBackTrouble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeartTrouble)
                    .addComponent(txtUserHeartTrouble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(txtRideResponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(btnCalculate))
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        
        // variables created to store user input
        String height;
        String backTrouble;
        String heartTrouble;
        
        // storing what user entered in each text field, in each variable created
        height = txtUserHeight.getText();
        backTrouble = txtUserBackTrouble.getText().toLowerCase(); // making the string lowercase, so it doesn't matter if the input is Y or y
        heartTrouble = txtUserHeartTrouble.getText().toLowerCase();
        
        // checking if the height input is a valid integer
        try {
            int check = Integer.parseInt(height);
        }
        catch(NumberFormatException ex) {
            txtRideResponse.setText(height +" isn't a valid height. Try again!");
        }
        
        // checking if the user (valid) height is within the proper range of 122-188cm (including those numbers)
        if (Integer.parseInt(height) <= 188 && Integer.parseInt(height) >= 122){
            // if user height falls within range, check for back problems or heart problems
            // if user input is n (no) to both, a positive response is outputed
            if (backTrouble.equals("n") && heartTrouble.equals("n")){
            txtRideResponse.setText("It is OK for you to ride this roller coaster. Have fun!");
        }   
            // if user inputed anything other than n for either options, check user input for back problems first
            else if (!backTrouble.equals("n")){
                // if user input is y (yes), a negative response is outputed
                if (backTrouble.equals("y")){
                txtRideResponse.setText("You have back trouble. Sorry, it is not safe for you to ride this roller coaster.");
                }
                // if user input is neither y or n, it is an invalid response and the user must try again
                else{
                txtRideResponse.setText(backTrouble+" isn't a valid response. Try again!");
                }
            }
                // if user input for backtrouble is n, then check user input for heart problems
                else {
                    // if user input is y (yes), a negative response is outputed
                    if (heartTrouble.equals("y")){
                    txtRideResponse.setText("You have heart trouble. Sorry, it is not safe for you to ride this roller coaster.");
                    }
                    // if user input is neither y or n, it is an invalid response and the user must try again
                    else{
                    txtRideResponse.setText(heartTrouble+" isn't a valid response. Try again!");
                    }
                }                   
        }
        // if user height falls outside the range, then a negative response is ouputed
        else {
        txtRideResponse.setText("Your height is "+height+"cm. Sorry, it is not safe for you to ride this roller coaster.");
        }
        
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed

        // exits program upon clicking the exit button
        System.exit(0);
        
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RollerCoasterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RollerCoasterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RollerCoasterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RollerCoasterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable () {
            public void run() {
                new RollerCoasterFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel lblBackTrouble;
    private javax.swing.JLabel lblHeartTrouble;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtRideResponse;
    private javax.swing.JTextField txtUserBackTrouble;
    private javax.swing.JTextField txtUserHeartTrouble;
    private javax.swing.JTextField txtUserHeight;
    // End of variables declaration//GEN-END:variables
}

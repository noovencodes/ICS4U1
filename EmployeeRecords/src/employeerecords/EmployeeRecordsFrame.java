/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package employeerecords;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Van
 */



public class EmployeeRecordsFrame extends javax.swing.JFrame {
    
    // list to store all employee data (the commented-out strings are test employees); essentially the database
    String EmployeesInfoList[] = new String[]{
        //"1234, Vanessa, Coelho, 75000, 08/11/22",
        //"2345, John, Connor, 20000, 08/09/21",
        //"3456, Lisa, Kiol, 50000, 01/26/22"
    };
       
        
    /**
     * Creates new form EmployeeRecordsFrame
     */
    public EmployeeRecordsFrame() {
                
        initComponents();
                 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblRemoveInstructionsTop = new javax.swing.JLabel();
        lblRemoveInstructionsBot = new javax.swing.JLabel();
        lblIDNum = new javax.swing.JLabel();
        txtEnterIDNum = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        txtEnterFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtEnterLastName = new javax.swing.JTextField();
        lblSalary = new javax.swing.JLabel();
        txtEnterSalary = new javax.swing.JTextField();
        lblStartDate = new javax.swing.JLabel();
        txtEnterStartDate = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutputRecords = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(80, 20, 240));
        lblTitle.setText("Employee Records");

        lblRemoveInstructionsTop.setText("Enter an ID# and press Remove");

        lblRemoveInstructionsBot.setText("to delete an Employee's Records.");

        lblIDNum.setText("ID #:");

        lblFirstName.setText("First Name:");

        lblLastName.setText("Last Name:");

        lblSalary.setText("Annual Salary:");

        lblStartDate.setText("Start Date (MM/DD/YYYY):");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnList.setText("List");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        txtOutputRecords.setColumns(20);
        txtOutputRecords.setRows(5);
        jScrollPane1.setViewportView(txtOutputRecords);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEnterLastName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEnterFirstName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSalary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEnterSalary))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIDNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEnterIDNum, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStartDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEnterStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRemoveInstructionsBot)
                            .addComponent(lblRemoveInstructionsTop)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove)
                            .addComponent(btnAdd)
                            .addComponent(btnList))))
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRemoveInstructionsTop)
                    .addComponent(lblIDNum)
                    .addComponent(txtEnterIDNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRemoveInstructionsBot)
                    .addComponent(lblFirstName)
                    .addComponent(txtEnterFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtEnterLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalary)
                    .addComponent(txtEnterSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartDate)
                    .addComponent(txtEnterStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        // add fields to a list and add that list to the employee db (database)/array
        String NewEmployee;
        // checks to see if the name text fields are valid names (strings) and if the id num, salary, start date fields are valid numbers. also checks to see if the employee already exists in the list
        if (ValidateEntry() || CheckIfEmployeeExists()){
            return;
        }
        
        // adds a new inputed employee into the employee database/existing list and outputs the list automatically
        ArrayList<String> tempEmployeesInfoList = new ArrayList<String>(Arrays.asList(EmployeesInfoList));  
        NewEmployee = txtEnterIDNum.getText() + ", " + txtEnterFirstName.getText() + ", " + txtEnterLastName.getText() + ", " + txtEnterSalary.getText() + ", " + txtEnterStartDate.getText();
        tempEmployeesInfoList.add(NewEmployee);
        EmployeesInfoList = tempEmployeesInfoList.toArray(EmployeesInfoList);
        
        // clears all input fields
        ClearFields();
        // outputs all employee info that is currently stored in the db
        DisplayEmployeesList();
        
    }//GEN-LAST:event_btnAddActionPerformed

public static <T> List<T> ArrayToListConversion(T arr[])   
{   
//invoking the asList() method and passing the array to be converted  
List<T> list = Arrays.asList(arr);   
//returns the list  
return list;   
}       
    
public static String[] clean(final String[] v) {
        List<String> list = new ArrayList<String>(Arrays.asList(v));
        list.removeAll(Collections.singleton(null));
        return list.toArray(new String[list.size()]);
}    
    
    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
       
        ClearFields();
        DisplayEmployeesList();
        
    }//GEN-LAST:event_btnListActionPerformed


    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed

        // creates a temporary array list that stores all employee data, as well as a list to store the information that needs to be removed 
        ArrayList<String> tempEmployeesInfoList = new ArrayList<String>(Arrays.asList(EmployeesInfoList));  
        List<String> toRemove = new ArrayList<>();
        for(String a : tempEmployeesInfoList) {
            // splits up the inofrmation in the string
            String employee[] = a.split(",");
            // checks to see if the number inputed matches an existing id number within the employee db
            if (employee[0].trim().equals(txtEnterIDNum.getText().trim())){
                // if it does, the information for that employee is added to list that stores data that is to be removed
                toRemove.add(a);
            }
        }
        // removes the employee data that matches with the data in the "remove" list
        tempEmployeesInfoList.removeAll(toRemove);
        // creates a new array with the correct size of the exisitng employee db
        this.EmployeesInfoList = new String[tempEmployeesInfoList.size()];
        // adds the correct empoyee list info to the new array
        EmployeesInfoList = tempEmployeesInfoList.toArray(EmployeesInfoList);  
        
        ClearFields();
        DisplayEmployeesList();
  
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeRecordsFrame().setVisible(true);
            }
        });
    }
    // function to clear all fields
    public void ClearFields() {
        txtEnterFirstName.setText("");
        txtEnterLastName.setText("");
        txtEnterSalary.setText("");
        txtEnterIDNum.setText("");
        txtEnterStartDate.setText("");
        txtOutputRecords.setText("");
    }

    // function to print out the entire employee db
    public void DisplayEmployeesList() {
        String EmployeeTxt = "";
        for (String employees : EmployeesInfoList) {
            String[] employee = employees.split(",");
            //List<String> studentLine = new ArrayList<String>(student.length)
            for (int i = 0; i < employee.length; i++) {
                System.out.print(employee[i]);
                EmployeeTxt = EmployeeTxt + employee[i] + " ";
            }
            EmployeeTxt = EmployeeTxt + "\n";

        }
        txtOutputRecords.setText(EmployeeTxt);
    }
    
    // function to check if each entry is valid (e.g if the name text field is a valid string)
    public boolean ValidateEntry() {
    
        
        if (countDigits(txtEnterFirstName.getText()) > 0 || countDigits(txtEnterLastName.getText()) > 0){
            txtOutputRecords.setText("An employee's name cannot contain numbers. Try again!");
            return true;
        }
        
        if (countLetters(txtEnterSalary.getText()) > 0 || countLetters(txtEnterIDNum.getText()) > 0){
            txtOutputRecords.setText("An ID number and/or salary cannot contain letters. Try again!");
            return true;
        }
        
        if (txtEnterFirstName.getText().equals("") || txtEnterLastName.getText().equals("")) {
            txtOutputRecords.setText("An employee's name cannot be blank. Try again!");
            return true;
        }

        return false;        
    }
    
    // to check if the employee exist within the db
    public boolean CheckIfEmployeeExists() {
        
        for (String employees : EmployeesInfoList) {
            String[] employee = employees.split(",");
            for (int i = 0; i < employee.length; i++) {
                System.out.println(employee[0] + employee[1]);
                if (employee[0].trim().equals(txtEnterIDNum.getText())){
                    txtOutputRecords.setText("This employee already exists. Try again!");
                    return true; 
                }
                else if (employee[1].toLowerCase().trim().equals(txtEnterFirstName.getText().toLowerCase().trim()) && employee[2].toLowerCase().trim().equals(txtEnterLastName.getText().toLowerCase().trim())) {
                    txtOutputRecords.setText("This employee already exists. Try again!");
                    return true; 
                }
            }
        }
        return false;  
    }
    
    // to count how many digits are in an inputed text (used to check if strings contain numbers)
    public int countDigits(String stringToSearch) {
    Pattern digitRegex = Pattern.compile("\\d");
    Matcher countMatcher = digitRegex.matcher(stringToSearch);

    int count = 0;
    while (countMatcher.find()) {
        count++;
    }

    return count;
    }

     // to count how many letters are in an inputed text (used to check if ints/doubles contain letters)
    public int countLetters(String stringToSearch) {
    Pattern letterRegex = Pattern.compile("[a-zA-Z]+");
    Matcher countMatcher = letterRegex.matcher(stringToSearch);

    int count = 0;
    while (countMatcher.find()) {
        count++;
    }

    return count;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnList;
    private javax.swing.JButton btnRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblIDNum;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblRemoveInstructionsBot;
    private javax.swing.JLabel lblRemoveInstructionsTop;
    private javax.swing.JLabel lblSalary;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtEnterFirstName;
    private javax.swing.JTextField txtEnterIDNum;
    private javax.swing.JTextField txtEnterLastName;
    private javax.swing.JTextField txtEnterSalary;
    private javax.swing.JTextField txtEnterStartDate;
    private javax.swing.JTextArea txtOutputRecords;
    // End of variables declaration//GEN-END:variables
}
